generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  aiGenerationCount Int       @default(0) // to track how many times user has used AI generation
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]  @relation("UserResumes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts") //for naming convention for tables in postgres (lower case and plural so table wont be called Account intead "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id     String @id @default(cuid()) //cuid for automatically generating ids
  userId String
  user   User   @relation(fields: [userId], references: [id], name: "UserResumes")

  title       String?
  description String?

  photoUrl        String?
  colorHex        String           @default("#000000")
  borderStyle     String           @default("squircle")
  summary         String?
  firstName       String?
  lastName        String?
  jobTitle        String?
  city            String?
  country         String?
  phone           String?
  email           String?
  workExperiences WorkExperience[]
  educations      Education[]
  skills          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //renaming to resumes instead of Resume
  @@map("resumes") //for naming convention for tables in postgres (lower case and plural so table wont be called Resume intead "resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade) //this means the field resumeId in out work experience model will be the same as id field in the Resume model (as mentioned in references array)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}
